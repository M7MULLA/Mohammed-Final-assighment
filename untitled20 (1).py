# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TAv0_IXskRowFImdNht-oTC-_RGeuanO
"""

import tkinter as tk
from tkinter import messagebox, simpledialog

# Entity classes definitions
class Employee:
    def __init__(self, employee_id, name, department, job_title, basic_salary, age, date_of_birth, passport_details):
        self.employee_id = int(employee_id)
        self.name = name
        self.department = department
        self.job_title = job_title
        self.basic_salary = basic_salary
        self.age = age
        self.date_of_birth = date_of_birth
        self.passport_details = passport_details

class Event:
    def __init__(self, event_id, event_type, theme, date, time, duration, venue_id, client_id, budget):
        self.event_id = int(event_id)
        self.event_type = event_type
        self.theme = theme
        self.date = date
        self.time = time
        self.duration = duration
        self.venue_id = venue_id
        self.client_id = client_id
        self.budget = budget

class Client:
    def __init__(self, client_id, name, contact_details, address, budget):
        self.client_id = int(client_id)
        self.name = name
        self.contact_details = contact_details
        self.address = address
        self.budget = budget

class Guest:
    def __init__(self, guest_id, name, RSVPStatus, relationshipToClient, contact_details, address, special_requirements, event_id):
        self.guest_id = int(guest_id)
        self.name = name
        self.RSVPStatus = RSVPStatus
        self.relationshipToClient = relationshipToClient
        self.contact_details = contact_details
        self.address = address
        self.special_requirements = special_requirements
        self.event_id = event_id

class Supplier:
    def __init__(self, supplier_id, Rating, Availability, name, serviceType, contact_details, address):
        self.supplier_id = int(supplier_id)
        self.Rating = Rating
        self.Availability = Availability
        self.name = name
        self.serviceType = serviceType
        self.contact_details = contact_details
        self.address = address

class Venue:
    def __init__(self, venue_id, name, address, capacity, booking_status, min_guests, max_guests):
        self.venue_id = int(venue_id)
        self.name = name
        self.address = address
        self.capacity = capacity
        self.booking_status = booking_status
        self.min_guests = min_guests
        self.max_guests = max_guests

class Salesperson(Employee):
    def __init__(self, employee_id, name, department, job_title, basic_salary, age, date_of_birth, passport_details,
                 salesTarget, currentSales, region, commissionRate, clientList, productKnowledge):
        super().__init__(employee_id, name, department, job_title, basic_salary, age, date_of_birth, passport_details)
        self.salesTarget = salesTarget
        self.currentSales = currentSales
        self.region = region
        self.commissionRate = commissionRate
        self.clientList = clientList
        self.productKnowledge = productKnowledge

# GUI class for event management system
class EventManagementSystemGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Event Management System")
        self.entities = {
            'employee': [], 'event': [], 'client': [], 'guest': [], 'supplier': [], 'venue': [], 'salesperson': []
        }
        self.create_widgets()

    def create_widgets(self):
        buttons = ['Add', 'Delete', 'Modify', 'Display']
        for index, name in enumerate(buttons):
            button = tk.Button(self.master, text=name, command=lambda n=name: getattr(self, f"{n.lower()}_entity")())
            button.grid(row=0, column=index, padx=10, pady=5)

    def add_entity(self):
        entity_type = self.ask_entity_type()
        if entity_type and entity_type.lower() in self.entities:
            entity_class = globals()[entity_type.capitalize()]
            entity_details = self.get_entity_details(entity_class)
            if entity_details:
                entity = entity_class(*entity_details)
                self.entities[entity_type.lower()].append(entity)
                messagebox.showinfo("Success", f"{entity_type.capitalize()} added successfully!")
        else:
            messagebox.showerror("Error", "Invalid entity type!")

    def delete_entity(self):
        entity_type = self.ask_entity_type()
        if entity_type:
            id_to_delete = simpledialog.askinteger("Delete", f"Enter ID of {entity_type} to delete:")
            entity_list = self.entities.get(entity_type.lower(), [])
            for i, entity in enumerate(entity_list):
                if hasattr(entity, 'employee_id') and entity.employee_id == id_to_delete:
                    del entity_list[i]
                    messagebox.showinfo("Success", f"{entity_type.capitalize()} deleted successfully!")
                    return
            messagebox.showerror("Error", f"{entity_type.capitalize()} with ID {id_to_delete} not found!")

    def modify_entity(self):
        entity_type = self.ask_entity_type()
        if entity_type:
            id_to_modify = simpledialog.askinteger("Modify", f"Enter ID of {entity_type} to modify:")
            entity_list = self.entities.get(entity_type.lower(), [])
            for i, entity in enumerate(entity_list):
                if hasattr(entity, 'employee_id') and entity.employee_id == id_to_modify:
                    new_details = self.get_entity_details(type(entity))
                    for index, attr in enumerate(entity.__dict__.keys()):
                        setattr(entity, attr, new_details[index])
                    messagebox.showinfo("Success", f"{entity_type.capitalize()} modified successfully!")
                    return
            messagebox.showerror("Error", f"{entity_type.capitalize()} with ID {id_to_modify} not found!")

    def display_entity(self):
        entity_type = self.ask_entity_type()
        if entity_type:
            entity_list = self.entities.get(entity_type.lower(), [])
            display_text = "\n".join(str(vars(e)) for e in entity_list)
            messagebox.showinfo(f"{entity_type.capitalize()} List", display_text if display_text else "No entries found.")

    def ask_entity_type(self):
        # This function prompts the user to choose an entity type to add
        entity_types = list(self.entities.keys())
        entity_type = simpledialog.askstring("Entity Type", f"Enter entity type ({', '.join(entity_types)}):")
        return entity_type

    def get_entity_details(self, entity_class):
        # This function collects details for a specific entity
        fields = entity_class.__init__.__code__.co_varnames[1:entity_class.__init__.__code__.co_argcount]
        details = []
        for field in fields:
            detail = simpledialog.askstring("Entity Details", f"Enter {field}:")
            details.append(detail)
        return details

if __name__ == "__main__":
    root = tk.Tk()
    app = EventManagementSystemGUI(root)
    root.mainloop()